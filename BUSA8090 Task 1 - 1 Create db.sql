/* README
Student ID: 46228241
Student Name: Jeremy Hong
BUSA8090 Task 1 - Case Study 2 - ProApp
File purpose: Create Database with relationships
*/

DROP DATABASE IF EXISTS ProApp;	 # Including this will reset whole database. Do not use after implementation to prevent loss of data.

CREATE DATABASE	ProApp;
USE ProApp;

/*
Create tables for People Entities
*/

CREATE TABLE USER (
	USER_ID INT NOT NULL PRIMARY KEY,
	Name  VARCHAR(500) NOT NULL,
	Email VARCHAR(500) NOT NULL,
	Contact_no INT NOT NULL,
	Date_created DATE NOT NULL,
	Last_login DATE NOT NULL
);

CREATE TABLE EDU_LEVEL(
	EDU_LEVEL_CODE TINYINT NOT NULL PRIMARY KEY,
	Edu_desc VARCHAR(30) NOT NULL
);

CREATE TABLE PROFICIENCY(
	PROF_CODE TINYINT NOT NULL PRIMARY KEY,
	Prof_desc VARCHAR(30) NOT NULL
);

CREATE TABLE APPLICANT_STATUS(
	APPL_CODE TINYINT NOT NULL PRIMARY KEY,
	Appl_desc VARCHAR(30) NOT NULL
);

CREATE TABLE PAY_STATUS(
	PAY_CODE TINYINT NOT NULL PRIMARY KEY,
	Pay_desc VARCHAR(30) NOT NULL
);

CREATE TABLE JOB_STATUS(
	JOB_STATUS_CODE TINYINT NOT NULL PRIMARY KEY,
	Job_status_desc VARCHAR(30) NOT NULL
);

CREATE TABLE CUSTOMER (
	CUSTOMER_ID	INT	NOT NULL PRIMARY KEY,
	USER_ID	INT	NOT NULL,
	customer_postcode INT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE SUPPLIER (
	SUPPLIER_ID INT NOT NULL PRIMARY KEY,
	USER_ID	INT	NOT NULL,
	supplier_postcode INT NOT NULL,
    supplier_trade_type VARCHAR(20) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE TRADE_APPLICANT (
	TRADE_APP_ID INT NOT NULL PRIMARY KEY,
	USER_ID INT NOT NULL,
    tradesperson_postcode INT NOT NULL,
    trade_type VARCHAR(20) NOT NULL,
    experience INT,
    EDU_LEVEL_CODE TINYINT,
    police_check_date DATE,
    APPL_CODE TINYINT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
    FOREIGN KEY (EDU_LEVEL_CODE) REFERENCES EDU_LEVEL(EDU_LEVEL_CODE),
    FOREIGN KEY (APPL_CODE) REFERENCES APPLICANT_STATUS(APPL_CODE)
);
    
CREATE TABLE TRADEPERSON (
	TRADEPERSON_ID INT NOT NULL PRIMARY KEY,
	TRADE_APP_ID INT NOT NULL,
	PROF_CODE TINYINT NOT NULL,
    Onboard_date DATE NOT NULL,
    FOREIGN KEY (TRADE_APP_ID) REFERENCES TRADE_APPLICANT(TRADE_APP_ID),
    FOREIGN KEY (PROF_CODE) REFERENCES PROFICIENCY(PROF_CODE)
);

/*
Create tables for Functional Entities
*/


CREATE TABLE TASK (
	TASK_ID INT NOT NULL PRIMARY KEY,
	CUSTOMER_ID INT NOT NULL,
    Task_desc VARCHAR(5000) NOT NULL,
	Task_trade_type VARCHAR(20) NOT NULL,
	Budget INT NOT NULL,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);
    
CREATE TABLE QUOTATION (
	QUOTATION_ID INT NOT NULL PRIMARY KEY,
	TRADEPERSON_ID INT NOT NULL,
	SUPPLIER_ID INT NOT NULL,
	Quote_desc VARCHAR(5000) NOT NULL,
	Quote_price INT NOT NULL,
    FOREIGN KEY (TRADEPERSON_ID) REFERENCES TRADEPERSON(TRADEPERSON_ID),
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID)
);

CREATE TABLE BID (
	BID_ID INT NOT NULL PRIMARY KEY,
	TRADEPERSON_ID INT NOT NULL,
	Bid_desc VARCHAR(5000) NOT NULL,
	Bid_trade_type VARCHAR(20) NOT NULL,
	Bid_price INT NOT NULL,
    FOREIGN KEY (TRADEPERSON_ID) REFERENCES TRADEPERSON(TRADEPERSON_ID)
);

CREATE TABLE BID_QUOTATION (
	BID_ID INT NOT NULL,
	QUOTATION_ID INT NOT NULL,
	Quote_accpeted BOOL NULL,
    FOREIGN KEY (BID_ID) REFERENCES BID(BID_ID),
    FOREIGN KEY (QUOTATION_ID) REFERENCES QUOTATION(QUOTATION_ID)
);

CREATE TABLE TASK_BID (
	TASK_ID INT NOT NULL,
	BID_ID INT NOT NULL,
	Bid_selected BOOL NULL,
    FOREIGN KEY (TASK_ID) REFERENCES TASK(TASK_ID),
    FOREIGN KEY (BID_ID) REFERENCES BID(BID_ID)
);

CREATE TABLE JOB (
	JOB_ID INT NOT NULL PRIMARY KEY,
	TASK_ID INT NOT NULL,
	BID_ID INT NOT NULL,
	JOB_STATUS_CODE TINYINT NOT NULL,
    FOREIGN KEY (TASK_ID) REFERENCES TASK_BID(TASK_ID),
    FOREIGN KEY (BID_ID) REFERENCES TASK_BID(BID_ID),
    FOREIGN KEY (JOB_STATUS_CODE) REFERENCES JOB_STATUS(JOB_STATUS_CODE)
);

CREATE TABLE PAYMENT (
	PAYMENT_ID INT NOT NULL PRIMARY KEY,
	JOB_ID INT NOT NULL,
	CUSTOMER_ID INT NOT NULL,
	TRADEPERSON_ID INT NOT NULL,
	Pay_date DATE NOT NULL,
	Pay_amount INT NOT NULL,
	PAY_CODE TINYINT NOT NULL,
    FOREIGN KEY (JOB_ID) REFERENCES JOB(JOB_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (TRADEPERSON_ID) REFERENCES TRADEPERSON(TRADEPERSON_ID),
    FOREIGN KEY (PAY_CODE) REFERENCES PAY_STATUS(PAY_CODE)
);

